package com.project.Readme.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ArrayNode;

@Service
public class AIService {

    private final WebClient webClient;
    private final ObjectMapper objectMapper;
    private final String apiKey;

    public AIService(@Value("${gemini.api.key}") String apiKey) {
        this.apiKey = apiKey;
        this.webClient = WebClient.create();
        this.objectMapper = new ObjectMapper();
    }

    public String generateReadme(String repoAnalysis, String ownerName, String avatarUrl) {
        // Get current timestamp
        java.time.LocalDateTime now = java.time.LocalDateTime.now();
        java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy 'at' HH:mm:ss");
        String currentTimestamp = now.format(formatter);
//        String prompt = "You are a professional README generator. " +
//                "Analyze the following repository details and create a clean, well-structured README.md file. " +
//                "The README should be professional, beginner-friendly, and formatted properly in Markdown. " +
//                "Follow this structure strictly:\n\n" +
//                "1. **Project Name**: Provide the name of the project.\n" +
//                "2. **Tech Stack**: List the languages, frameworks, and major libraries used.\n" +
//                "3. **Modules & Packages**: Summarize the key modules, packages, and their purposes.\n" +
//                "4. **Environment Variables**: Mention all required environment variables and provide clear steps on how to generate or configure them.\n" +
//                "5. **Setup Instructions**: Step-by-step guide on how to clone the repository and include the repo of the url yourself, install dependencies, configure environment variables, and run the project.\n" +
//                "6. **Directory Structure**: Provide a full directory/file tree of the repository in a properly formatted Markdown code block, making sure it is readable and clean.\n" +
//                "7. **Owner Details**: Include the repository owner's name"+(ownerName)+"in the footer.\n" +
//                "8. **Copyright & Timestamp**: End the README with a copyright statement and use this EXACT timestamp: " + currentTimestamp + "\n\n" +
//                "Make the README of at least 1400 words, clear, structured, and visually appealing. Make the formatting more appealing and with proper formatting for the directory structure" +
//                "you should also use the emoji's to make the readme more attractive at the necessary places." +
//                "also dont add any warning about the file structure's arrangement to make it feel real " +
//                "while generating the output give bullet points to the headings instead of the numberings  and also use proper heading tags for the above mentioned headings and enhance font sizes and also proper font styling to the generated text" +
//                "Do not omit any critical technical detail from the repository analysis.\n\n" +
//                repoAnalysis;
        String prompt = "You are a professional README generator. " +
                "Analyze the following repository details and create a clean, well-structured README.md file. " +
                "The README must strictly follow this structure:\n\n" +
                "1. **Project Name**: Provide the project name clearly.\n" +
                "2. **Tech Stack**: List all languages, frameworks, and major libraries used in the project.\n" +
                "3. **Modules and Packages**: Summarize the core modules and packages in this repository.\n" +
                "4. **Environment Variables**: List all environment variables required, along with clear steps to generate or configure them.\n" +
                "5. **Setup Instructions**: Step-by-step guide on how to clone and run the project as a new user.\n" +
                "6. **Repository File Structure**: Include the **complete directory and file structure** of the project, formatted in a clear tree-like hierarchy.\n" +
                "7. **Owner Details**: At the footer, include repository owner details with avatar URL (" + avatarUrl + ") followed by owner name (" + ownerName + "). Use HTML img tag with width='50' height='50' for the avatar image.\n" +
                "8. **Metadata**: Add a copyright statement and the exact date/time the README was generated.\n\n" +
                "after the Copyright Statement add the statement that 'this README was generated by AI Readme Generator'" +
                "Make sure the README is:\n" +
                "-1200 words long" +
                "- Well-formatted with proper Markdown styling.\n" +
                "- Easy to read and professional in tone.\n" +
                "- Comprehensive enough for developers to quickly understand and use the repository.\n\n" +
                "also dont add any warning about the file structure's arrangement to make it feel real+\n" +
                repoAnalysis;



        try {
            // ✅ Build request body properly
            ObjectNode requestBody = objectMapper.createObjectNode();
            ArrayNode contents = objectMapper.createArrayNode();
            ObjectNode content = objectMapper.createObjectNode();
            content.put("role", "user");

            ArrayNode parts = objectMapper.createArrayNode();
            ObjectNode part = objectMapper.createObjectNode();
            part.put("text", prompt);
            parts.add(part);

            content.set("parts", parts);
            contents.add(content);

            requestBody.set("contents", contents);

            // ✅ Call Gemini API
            String response = webClient.post()
                    .uri("https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + apiKey)
                    .header("Content-Type", "application/json")
                    .bodyValue(requestBody.toString()) // send as raw JSON string
                    .retrieve()
                    .bodyToMono(String.class)
                    .block();

            // ✅ Parse response safely
            JsonNode jsonNode = objectMapper.readTree(response);

            if (jsonNode.has("candidates")) {
                return jsonNode.path("candidates").get(0)
                        .path("content").path("parts").get(0)
                        .path("text").asText();
            }

            return "⚠️ Unexpected response: " + response;

        } catch (Exception e) {
            e.printStackTrace();
            return "❌ Error generating README: " + e.getMessage();
        }
    }
}
